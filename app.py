0, key="poss_moyenne_B", step=0.1)  
    xG_B = st.number_input("‚≠ê Buts attendus (xG)", min_value=0.0, value=1.0, step=0.1, key="xG_B")  
    tirs_cadres_B = st.number_input("üéØ Tirs cadr√©s par match", min_value=0.0, value=8.0, key="tirs_cadres_B", step=0.1)  
    pourcentage_tirs_convertis_B = st.number_input("Convert Pourcentage de tirs convertis (%)", min_value=0.0, max_value=100.0, value=15.0, key="pourcentage_tirs_convertis_B", step=0.1)  

with col2:  
    grosses_occasions_B = st.number_input("‚ú® Grosses occasions", min_value=0.0, value=3.0, key="grosses_occasions_B", step=0.1)  
    grosses_occasions_ratees_B = st.number_input("üí® Grosses occasions rat√©es", min_value=0.0, value=1.0, key="grosses_occasions_ratees_B", step=0.1)  
    passes_reussies_B = st.number_input("‚úÖ Passes r√©ussies/match (sur 1000)", min_value=0.0, value=250.0, key="passes_reussies_B", step=0.1)  
    passes_longues_precises_B = st.number_input("‚û°Ô∏è Passes longues pr√©cises/match", min_value=0.0, value=10.0, key="passes_longues_precises_B", step=0.1)  
    centres_reussis_B = st.number_input("‚ÜóÔ∏è Centres r√©ussis/match", min_value=0.0, value=3.0, key="centres_reussis_B", step=0.1)  
    penalties_obtenus_B = st.number_input("üéÅ P√©nalties obtenus", min_value=0.0, value=0.0, key="penalties_obtenus_B", step=0.1)  
    touches_surface_adverse_B = st.number_input("Entree Touches dans la surface adverse", min_value=0.0, value=8.0, key="touches_surface_adverse_B", step=0.1)  
    corners_B = st.number_input("Corner Nombre de corners", min_value=0.0, value=3.0, key="corners_B", step=0.1)  

col3, col4 = st.columns(2)  

with col3:  
    corners_par_match_B = st.number_input("Corner/Match Corners par match", min_value=0.0, value=1.0, key="corners_par_match_B", step=0.1)  
    corners_concedes_B = st.number_input("Corner Conc√©d√©s Corners conc√©d√©s/match", min_value=0.0, value=2.0, key="corners_concedes_B", step=0.1)  
    xG_concedes_B = st.number_input("‚≠ê xG conc√©d√©s", min_value=0.0, value=1.5, step=0.1, key="xG_concedes_B")  
    interceptions_B = st.number_input("‚úã Interceptions par match", min_value=0.0, value=8.0, key="interceptions_B", step=0.1)  
    tacles_reussis_B = st.number_input("Tacles R√©ussis Tacles r√©ussis par match", min_value=0.0, value=4.0, key="tacles_reussis_B", step=0.1)  
    degagements_B = st.number_input("D√©gagement D√©gagements par match", min_value=0.0, value=6.0, key="degagements_B", step=0.1)  
    possessions_recuperees_B = st.number_input("Milieu Possessions r√©cup√©r√©es au milieu/match", min_value=0.0, value=4.0, key="possessions_recuperees_B", step=0.1)  

with col4:  
    penalties_concedes_B = st.number_input("üéÅ P√©nalties conc√©d√©s", min_value=0.0, value=1.0, key="penalties_concedes_B", step=0.1)  
    arrets_B = st.number_input("üß§ Arr√™ts par match", min_value=0.0, value=2.0, key="arrets_B", step=0.1)  
    fautes_B = st.number_input("Fautes Faute par match", min_value=0.0, value=12.0, key="fautes_B", step=0.1)  
    cartons_jaunes_B = st.number_input("üü® Cartons jaunes", min_value=0.0, value=1.0, key="cartons_jaunes_B", step=0.1)  
    cartons_rouges_B = st.number_input("üü• Cartons rouges", min_value=0.0, value=0.0, key="cartons_rouges_B", step=0.1)  
    tactique_B = st.text_input("Tactique de l'√©quipe B", value="4-2-3-1", key="tactique_B")  

# --- Section pour les joueurs cl√©s de l'√©quipe B ---  
st.header("‚≠ê Joueurs Cl√©s de l'√©quipe B")  
absents_B = st.number_input("Nombre de joueurs cl√©s absents (sur 5)", min_value=0, max_value=5, value=0, key="absents_B")  
ratings_B = []  
for i in range(5):  
    rating = st.number_input(f"Rating du joueur cl√© {i + 1} (0-10)", min_value=0.0, max_value=10.0, value=5.0, key=f"rating_B_{i}", step=0.1)  
    ratings_B.append(rating)  

# --- Motivation des √âquipes ---  
st.header("üî• Motivation des √âquipes")  
col1, col2 = st.columns(2)  

with col1:  
    motivation_A = st.number_input("Motivation de l'√©quipe A (1 √† 10)", min_value=1.0, max_value=10.0, value=5.0, key="motivation_A", step=0.1)  
    st.write(f"Niveau de motivation de l'√©quipe A : **{motivation_A}**")  

with col2:  
    motivation_B = st.number_input("Motivation de l'√©quipe B (1 √† 10)", min_value=1.0, max_value=10.0, value=5.0, key="motivation_B", step=0.1)  
    st.write(f"Niveau de motivation de l'√©quipe B : **{motivation_B}**")  

# --- Pr√©diction des buts avec la m√©thode de Poisson ---  
if 'xG_A' in locals() and 'xG_B' in locals():  
    buts_moyens_A, buts_moyens_B = prediction_buts_poisson(xG_A, xG_B)  
    afficher_resultats_poisson(buts_moyens_A, buts_moyens_B)  
else:  
    st.warning("Veuillez remplir les crit√®res des √©quipes A et B pour activer la pr√©diction de Poisson.")  

# --- Pr√©diction multivariable avec r√©gression logistique (version am√©lior√©e) ---  
st.header("üîÆ Pr√©diction Multivariable (R√©gression Logistique)")  

# Poids pour chaque crit√®re (ajuster selon l'importance)  
poids = {  
    'buts_produits': 0.15,  
    'buts_encaisses': -0.10,  
    'possession': 0.08,  
    'motivation': 0.12,  
    'absents': -0.15,  
    'rating_joueurs': 0.20,  
    'forme_recente': 0.20,  
    'historique_confrontations': 0.10,  # Nouveau crit√®re  
    'victoires': 0.05,  # Poids pour l'historique g√©n√©ral des victoires  
    'confrontations_directes': 0.10  # Poids pour les confrontations directes  
}  

# Historique des confrontations directes (1 pour victoire de A, -1 pour victoire de B, 0 pour nul)  
historique_confrontations = (victoires_A_contre_B - victoires_B_contre_A) / (victoires_A_contre_B + victoires_B_contre_A + nuls_AB) if (victoires_A_contre_B + victoires_B_contre_A + nuls_AB) > 0 else 0  

# Pr√©paration des donn√©es pour le mod√®le  
X = np.array([  
    [total_buts_produits_A * poids['buts_produits'],  
     total_buts_encaisses_A * poids['buts_encaisses'],  
     poss_moyenne_A * poids['possession'],  
     motivation_A * poids['motivation'],  
     absents_A * poids['absents'],  
     np.mean(ratings_A) * poids['rating_joueurs'],  
     forme_recente_A * poids['forme_recente'],  
     historique_confrontations * poids['historique_confrontations'],  
     victoires_A * poids['victoires'],  # Ajout de l'historique des victoires  
     victoires_A_contre_B * poids['confrontations_directes']],  # Ajout des confrontations directes  

    [total_buts_produits_B * poids['buts_produits'],  
     total_buts_encaisses_B * poids['buts_encaisses'],  
     poss_moyenne_B * poids['possession'],  
     motivation_B * poids['motivation'],  
     absents_B * poids['absents'],  
     np.mean(ratings_B) * poids['rating_joueurs'],  
     forme_recente_B * poids['forme_recente'],  
     historique_confrontations * poids['historique_confrontations'],  
     victoires_B * poids['victoires'],  # Ajout de l'historique des victoires  
     victoires_B_contre_A * poids['confrontations_directes']]  # Ajout des confrontations directes  
])  

y = np.array([1, 0])  # 1 pour l'√©quipe A, 0 pour l'√©quipe B  

# Normalisation des donn√©es (important pour la r√©gression logistique)  
scaler = StandardScaler()  
X_scaled = scaler.fit_transform(X)  

# Entra√Ænement du mod√®le avec r√©gularisation pour √©viter le surapprentissage  
model = LogisticRegression(penalty='l2', C=0.1, solver='liblinear')  # L2 r√©gularisation  
model.fit(X_scaled, y)  

# Pr√©diction des r√©sultats  
prediction = model.predict_proba(X_scaled)  

# Affichage des probabilit√©s de victoire  
st.write(f"Probabilit√© de victoire pour l'√©quipe A : **{prediction[0][1]:.2%}**")  
st.write(f"Probabilit√© de victoire pour l'√©quipe B : **{prediction[1][1]:.2%}**")  

# --- Interpr√©tation des coefficients du mod√®le ---  
st.header("üßê Interpr√©tation du Mod√®le")  
feature_names = ['Buts produits totaux', 'Buts encaiss√©s totaux', 'Possession moyenne',  
                 'Motivation', 'Absents', 'Rating joueurs', 'Forme r√©cente',  
                 'Historique confrontations', 'Historique victoires', 'Confrontations directes']  
coefficients = model.coef_[0]  

for feature, coef in zip(feature_names, coefficients):  
    st.write(f"{feature}: Coefficient = {coef:.2f}")  

# --- Calcul des paris alternatifs ---  
double_chance_A = prediction[0][1] + (1 - prediction[1][1])  # √âquipe A gagne ou match nul  
double_chance_B = prediction[1][1] + (1 - prediction[0][1])  # √âquipe B gagne ou match nul  

# --- Affichage des paris alternatifs ---  
st.header("üí∞ Paris Alternatifs")  
st.write(f"Double chance pour l'√©quipe A (gagner ou match nul) : **{double_chance_A:.2%}**")  
st.write(f"Double chance pour l'√©quipe B (gagner ou match nul) : **{double_chance_B:.2%}**")
