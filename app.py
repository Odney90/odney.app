import streamlit as st  
import pandas as pd  
import numpy as np  
from scipy.special import factorial  
from sklearn.linear_model import LogisticRegression  
from sklearn.ensemble import RandomForestClassifier  
from xgboost import XGBClassifier  
from sklearn.model_selection import cross_val_score  
from io import BytesIO  
from docx import Document  
import matplotlib.pyplot as plt  

# Fonction pour pr√©dire avec le mod√®le Poisson  
@st.cache_data  
def poisson_prediction(goals):  
    probabilities = []  
    for k in range(6):  # Calculer pour 0 √† 5 buts  
        prob = np.exp(-goals) * (goals ** k) / factorial(k)  
        probabilities.append(prob)  
    return probabilities  

# Fonction pour cr√©er un document Word avec les r√©sultats  
def create_doc(results):  
    doc = Document()  
    doc.add_heading('Analyse de Matchs de Football et Pr√©dictions de Paris Sportifs', level=1)  

    # Ajout des donn√©es des √©quipes  
    doc.add_heading('Donn√©es des √âquipes', level=2)  
    doc.add_paragraph(f"√âquipe Domicile: {results.get('√âquipe Domicile', 'Inconnu')}")  
    doc.add_paragraph(f"√âquipe Ext√©rieure: {results.get('√âquipe Ext√©rieure', 'Inconnu')}")  

    # V√©rification et ajout des buts pr√©dits  
    buts_domicile = results.get('Buts Pr√©dit Domicile', 0)  
    buts_exterieur = results.get('Buts Pr√©dit Ext√©rieur', 0)  
    
    doc.add_paragraph(f"Buts Pr√©dit Domicile: {buts_domicile:.2f}" if isinstance(buts_domicile, (int, float)) else "Buts Pr√©dit Domicile: Non disponible")  
    doc.add_paragraph(f"Buts Pr√©dit Ext√©rieur: {buts_exterieur:.2f}" if isinstance(buts_exterieur, (int, float)) else "Buts Pr√©dit Ext√©rieur: Non disponible")  

    # Ajout des probabilit√©s des mod√®les  
    doc.add_heading('Probabilit√©s des Mod√®les', level=2)  
    doc.add_paragraph(f"Probabilit√© Domicile ou Nul: {results.get('Probabilit√© Domicile', 0):.2f}")  
    doc.add_paragraph(f"Probabilit√© Nul ou Victoire Ext√©rieure: {results.get('Probabilit√© Nul', 0):.2f}")  
    doc.add_paragraph(f"Probabilit√© Domicile ou Victoire Ext√©rieure: {results.get('Probabilit√© Ext√©rieure', 0):.2f}")  

    # Enregistrement du document  
    buffer = BytesIO()  
    doc.save(buffer)  
    buffer.seek(0)  
    return buffer  

# Fonction pour entra√Æner et pr√©dire avec les mod√®les  
@st.cache_resource  
def train_models():  
    # G√©n√©rer des donn√©es d'entra√Ænement simul√©es  
    np.random.seed(42)  
    data_size = 500  # R√©duire la taille des donn√©es pour un entra√Ænement plus rapide  
    data = pd.DataFrame({  
        'home_goals': np.random.randint(0, 3, size=data_size),  
        'away_goals': np.random.randint(0, 3, size=data_size),  
        'home_xG': np.random.uniform(0, 2, size=data_size),  
        'away_xG': np.random.uniform(0, 2, size=data_size),  
        'home_encais': np.random.uniform(0, 2, size=data_size),  
        'away_encais': np.random.uniform(0, 2, size=data_size),  
        'result': np.random.choice([0, 1, 2], size=data_size)  # 0: D, 1: N, 2: E  
    })  

    # Cr√©ation des cibles pour le paris double chance  
    data['double_chance'] = np.where(data['result'] == 0, 0,  
                                      np.where(data['result'] == 1, 1,  
                                               2))  

    X = data[['home_goals', 'away_goals', 'home_xG', 'away_xG', 'home_encais', 'away_encais']]  
    y = data['double_chance']  

    # Entra√Ænement des mod√®les  
    log_reg = LogisticRegression(max_iter=100, solver='lbfgs')  # Utilisation des param√®tres par d√©faut  
    rf = RandomForestClassifier(n_estimators=10, max_depth=3)  # R√©duction du nombre d'estimateurs  
    xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss', n_estimators=10, max_depth=3)  # R√©duction des param√®tres  

    # Entra√Ænement des mod√®les  
    log_reg.fit(X, y)  
    rf.fit(X, y)  
    xgb.fit(X, y)  

    return log_reg, rf, xgb  

# V√©rifier si les mod√®les sont d√©j√† charg√©s dans l'√©tat de session  
if 'models' not in st.session_state:  
    st.session_state.models = train_models()  

# Assurez-vous que les mod√®les sont bien charg√©s  
if st.session_state.models is not None:  
    log_reg_model, rf_model, xgb_model = st.session_state.models  
else:  
    st.error("Les mod√®les n'ont pas pu √™tre charg√©s.")  

# Fonction pour √©valuer les mod√®les avec validation crois√©e K-Fold  
def evaluate_models(X, y):  
    models = {  
        "R√©gression Logistique": LogisticRegression(max_iter=100, C=1.0, solver='lbfgs'),  
        "Random Forest": RandomForestClassifier(n_estimators=10, max_depth=3),  
        "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss', n_estimators=10, max_depth=3)  
    }  
    
    results = {}  
    for name, model in models.items():  
        scores = cross_val_score(model, X, y, cv=3, scoring='accuracy')  # K=3 pour r√©duire le temps  
        results[name] = scores.mean()  # Moyenne des scores de validation crois√©e  
    
    return results  

# Interface utilisateur  
st.title("üèÜ Analyse de Matchs de Football et Pr√©dictions de Paris Sportifs")  

# Saisie des donn√©es des √©quipes  
st.header("Saisie des donn√©es des √©quipes")  

# Regroupement des statistiques des √©quipes  
with st.expander("Statistiques des √âquipes", expanded=True):  
    # √âquipe √† domicile  
    home_team = st.text_input("Nom de l'√©quipe √† domicile", value="√âquipe A")  
    home_goals = st.slider("Moyenne de buts marqu√©s par match (domicile)", min_value=0.0, max_value=5.0, value=2.5, step=0.1)  
    home_xG = st.slider("xG (Expected Goals) (domicile)", min_value=0.0, max_value=5.0, value=2.0, step=0.1)  
    home_encais = st.slider("Moyenne de buts encaiss√©s par match (domicile)", min_value=0.0, max_value=5.0, value=1.0, step=0.1)  
    home_victories = st.number_input("Nombre de victoires √† domicile", min_value=0, value=5)  # Nouveau champ  
    home_goals_scored = st.number_input("Nombre de buts marqu√©s √† domicile", min_value=0, value=15)  # Nouveau champ  
    home_xGA = st.slider("xGA (Expected Goals Against) (domicile)", min_value=0.0, max_value=5.0, value=1.5, step=0.1)  
    home_tirs_par_match = st.slider("Nombres de tirs par match (domicile)", min_value=0, max_value=30, value=15)  
    home_passes_menant_a_tir = st.slider("Nombres de passes menant √† un tir (domicile)", min_value=0, max_value=30, value=10)  
    home_tirs_cadres = st.slider("Tirs cadr√©s par match (domicile)", min_value=0, max_value=15, value=5)  
    home_tirs_concedes = st.slider("Nombres de tirs conc√©d√©s par match (domicile)", min_value=0, max_value=30, value=8)  
    home_duels_defensifs = st.slider("Duels d√©fensifs gagn√©s (%) (domicile)", min_value=0.0, max_value=100.0, value=60.0)  
    home_possession = st.slider("Possession moyenne (%) (domicile)", min_value=0.0, max_value=100.0, value=55.0)  
    home_passes_reussies = st.slider("Passes r√©ussies (%) (domicile)", min_value=0.0, max_value=100.0, value=80.0)  
    home_touches_surface = st.slider("Balles touch√©es dans la surface adverse (domicile)", min_value=0, max_value=50, value=20)  
    home_forme_recente = st.slider("Forme r√©cente (points sur les 5 derniers matchs) (domicile)", min_value=0, max_value=15, value=10)  

    # √âquipe √† l'ext√©rieur  
    away_team = st.text_input("Nom de l'√©quipe √† l'ext√©rieur", value="√âquipe B")  
    away_goals = st.slider("Moyenne de buts marqu√©s par match (ext√©rieur)", min_value=0.0, max_value=5.0, value=1.5, step=0.1)  
    away_xG = st.slider("xG (Expected Goals) (ext√©rieur)", min_value=0.0, max_value=5.0, value=1.8, step=0.1)  
    away_encais = st.slider("Moyenne de buts encaiss√©s par match (ext√©rieur)", min_value=0.0, max_value=5.0, value=2.0, step=0.1)  
    away_victories = st.number_input("Nombre de victoires √† l'ext√©rieur", min_value=0, value=3)  # Nouveau champ  
    away_goals_scored = st.number_input("Nombre de buts marqu√©s √† l'ext√©rieur", min_value=0, value=10)  # Nouveau champ  
    away_xGA = st.slider("xGA (Expected Goals Against) (ext√©rieur)", min_value=0.0, max_value=5.0, value=1.5, step=0.1)  
    away_tirs_par_match = st.slider("Nombres de tirs par match (ext√©rieur)", min_value=0, max_value=30, value=12)  
    away_passes_menant_a_tir = st.slider("Nombres de passes menant √† un tir (ext√©rieur)", min_value=0, max_value=30, value=8)  
    away_tirs_cadres = st.slider("Tirs cadr√©s par match (ext√©rieur)", min_value=0, max_value=15, value=4)  
    away_tirs_concedes = st.slider("Nombres de tirs conc√©d√©s par match (ext√©rieur)", min_value=0, max_value=30, value=10)  
    away_duels_defensifs = st.slider("Duels d√©fensifs gagn√©s (%) (ext√©rieur)", min_value=0.0, max_value=100.0, value=55.0)  
    away_possession = st.slider("Possession moyenne (%) (ext√©rieur)", min_value=0.0, max_value=100.0, value=50.0)  
    away_passes_reussies = st.slider("Passes r√©ussies (%) (ext√©rieur)", min_value=0.0, max_value=100.0, value=75.0)  
    away_touches_surface = st.slider("Balles touch√©es dans la surface adverse (ext√©rieur)", min_value=0, max_value=50, value=15)  
    away_forme_recente = st.slider("Forme r√©cente (points sur les 5 derniers matchs) (ext√©rieur)", min_value=0, max_value=15, value=8)  

    # Quantification de l'√©quipe qui re√ßoit  
    receiving_team = st.slider("√âquipe qui re√ßoit (0 = Ext√©rieur, 1 = Domicile)", min_value=0.0, max_value=1.0, value=0.5)  

# Saisie des cotes des bookmakers (non utilis√©es par les mod√®les)  
st.header("Cotes des √âquipes")  
odds_home = st.number_input("Cote pour l'√©quipe √† domicile", min_value=1.0, value=1.8)  
odds_away = st.number_input("Cote pour l'√©quipe √† l'ext√©rieur", min_value=1.0, value=2.2)  

# Calcul des probabilit√©s implicites  
def calculate_implied_prob(odds):  
    return 1 / odds  

# Pr√©dictions  
if st.button("üîç Pr√©dire les r√©sultats"):  
    with st.spinner('Calcul des r√©sultats...'):  
        # √âvaluation des mod√®les avec validation crois√©e K-Fold  
        X = pd.DataFrame({  
            'home_goals': np.random.randint(0, 3, size=1000),  
            'away_goals': np.random.randint(0, 3, size=1000),  
            'home_xG': np.random.uniform(0, 2, size=1000),  
            'away_xG': np.random.uniform(0, 2, size=1000),  
            'home_encais': np.random.uniform(0, 2, size=1000),  
            'away_encais': np.random.uniform(0, 2, size=1000)  
        })  
        y = np.random.choice([0, 1, 2], size=1000)  
        results = evaluate_models(X, y)  
        st.write("R√©sultats de la validation crois√©e K-Fold :", results)  

        # Calcul des buts pr√©dit  
        home_goals_pred = home_goals + home_xG - away_encais  
        away_goals_pred = away_goals + away_xG - home_encais  
    
        # Calcul des probabilit√©s avec le mod√®le de Poisson  
        home_probabilities = poisson_prediction(home_goals_pred)  
        away_probabilities = poisson_prediction(away_goals_pred)  

        # Formatage des r√©sultats pour l'affichage  
        home_results = ", ".join([f"{i} but {home_probabilities[i] * 100:.1f}%" for i in range(len(home_probabilities))])  
        away_results = ", ".join([f"{i} but {away_probabilities[i] * 100:.1f}%" for i in range(len(away_probabilities))])  

        # Calcul des probabilit√©s implicites  
        implied_home_prob = calculate_implied_prob(odds_home)  
        implied_away_prob = calculate_implied_prob(odds_away)  
        implied_draw_prob = 1 - (implied_home_prob + implied_away_prob)  

        # Pr√©dictions avec les mod√®les  
        input_data = [[home_goals_pred, away_goals_pred, home_xG, away_xG, home_encais, away_encais]]  # 6 caract√©ristiques  
    
        try:  
            log_reg_prob = log_reg_model.predict_proba(input_data)[0]  
            rf_prob = rf_model.predict_proba(input_data)[0]  
            xgb_prob = xgb_model.predict_proba(input_data)[0]  
        except Exception as e:  
            st.error(f"Erreur lors de la pr√©diction : {e}")  
            log_reg_prob, rf_prob, xgb_prob = None, None, None  

        # Affichage des r√©sultats  
        st.subheader("üìä R√©sultats des Pr√©dictions")  

        # Tableau pour le mod√®le de Poisson  
        poisson_results = pd.DataFrame({  
            "√âquipe": [home_team, away_team],  
            "Buts Pr√©dit": [home_results, away_results]  
        })  

        st.markdown("### R√©sultats du Mod√®le de Poisson")  
        st.dataframe(poisson_results, use_container_width=True)  

        # D√©tails sur chaque pr√©diction des mod√®les  
        st.markdown("### D√©tails des Pr√©dictions des Mod√®les")  
        model_details = {  
            "Mod√®le": ["R√©gression Logistique", "Random Forest", "XGBoost"],  
            "Probabilit√© Domicile ou Nul (%)": [  
                log_reg_prob[0] * 100 if log_reg_prob is not None else 0,  
                rf_prob[0] * 100 if rf_prob is not None else 0,  
                xgb_prob[0] * 100 if xgb_prob is not None else 0  
            ],  
            "Probabilit√© Nul ou Victoire Ext√©rieure (%)": [  
                log_reg_prob[1] * 100 if log_reg_prob is not None else 0,  
                rf_prob[1] * 100 if rf_prob is not None else 0,  
                xgb_prob[1] * 100 if xgb_prob is not None else 0  
            ],  
            "Probabilit√© Domicile ou Victoire Ext√©rieure (%)": [  
                log_reg_prob[2] * 100 if log_reg_prob is not None else 0,  
                rf_prob[2] * 100 if rf_prob is not None else 0,  
                xgb_prob[2] * 100 if xgb_prob is not None else 0  
            ]  
        }  
        model_details_df = pd.DataFrame(model_details)  
        st.dataframe(model_details_df, use_container_width=True)  

        # Comparaison des probabilit√©s implicites et pr√©dites  
        st.subheader("üìä Comparaison des Probabilit√©s Implicites et Pr√©dites")  
        comparison_data = {  
            "Type": ["Implicite Domicile ou Nul", "Implicite Nul ou Ext√©rieure", "Implicite Domicile ou Ext√©rieure",   
                     "Pr√©dite Domicile ou Nul", "Pr√©dite Nul ou Victoire Ext√©rieure", "Pr√©dite Domicile ou Victoire Ext√©rieure"],  
            "Probabilit√© (%)": [  
                implied_home_prob * 100,  
                implied_draw_prob * 100,  
                implied_away_prob * 100,  
                log_reg_prob[0] * 100 if log_reg_prob is not None else None,  
                log_reg_prob[1] * 100 if log_reg_prob is not None else None,
                log_reg_prob[2] * 100 if log_reg_prob is not None else None,  
            ]  
        }  
        comparison_df = pd.DataFrame(comparison_data)  
        st.dataframe(comparison_df, use_container_width=True)  

        # Graphique des performances des mod√®les  
        st.subheader("üìà Comparaison des Mod√®les")  
        model_comparison_data = {  
            "Mod√®le": ["R√©gression Logistique", "Random Forest", "XGBoost"],  
            "Probabilit√© Domicile ou Nul (%)": [log_reg_prob[0] * 100 if log_reg_prob is not None else 0,  
                                                 rf_prob[0] * 100 if rf_prob is not None else 0,  
                                                 xgb_prob[0] * 100 if xgb_prob is not None else 0],  
            "Probabilit√© Nul ou Victoire Ext√©rieure (%)": [log_reg_prob[1] * 100 if log_reg_prob is not None else 0,  
                                                             rf_prob[1] * 100 if rf_prob is not None else 0,  
                                                             xgb_prob[1] * 100 if xgb_prob is not None else 0],  
            "Probabilit√© Domicile ou Victoire Ext√©rieure (%)": [log_reg_prob[2] * 100 if log_reg_prob is not None else 0,  
                                                                  rf_prob[2] * 100 if rf_prob is not None else 0,  
                                                                  xgb_prob[2] * 100 if xgb_prob is not None else 0]  
        }  
        model_comparison_df = pd.DataFrame(model_comparison_data)  
        st.dataframe(model_comparison_df, use_container_width=True)  

        # Graphique des probabilit√©s pr√©dites  
        st.subheader("üìä Graphique des Probabilit√©s Pr√©dites par Mod√®le")  
        fig, ax = plt.subplots()  
        bar_width = 0.2  
        index = np.arange(len(model_comparison_data["Mod√®le"]))  

        ax.bar(index, model_comparison_data["Probabilit√© Domicile ou Nul (%)"], bar_width, label='Domicile ou Nul')  
        ax.bar(index + bar_width, model_comparison_data["Probabilit√© Nul ou Victoire Ext√©rieure (%)"], bar_width, label='Nul ou Victoire Ext√©rieure')  
        ax.bar(index + 2 * bar_width, model_comparison_data["Probabilit√© Domicile ou Victoire Ext√©rieure (%)"], bar_width, label='Domicile ou Victoire Ext√©rieure')  

        ax.set_xlabel('Mod√®les')  
        ax.set_ylabel('Probabilit√©s (%)')  
        ax.set_title('Comparaison des Probabilit√©s Pr√©dites par Mod√®le')  
        ax.set_xticks(index + bar_width)  
        ax.set_xticklabels(model_comparison_data["Mod√®le"])  
        ax.legend()  

        st.pyplot(fig)  

        # Option pour t√©l√©charger le document Word avec les r√©sultats  
        results = {  
            '√âquipe Domicile': home_team,  
            '√âquipe Ext√©rieure': away_team,  
            'Buts Pr√©dit Domicile': home_results,  
            'Buts Pr√©dit Ext√©rieur': away_results,  
            'Probabilit√© Domicile ou Nul': log_reg_prob[0] * 100 if log_reg_prob is not None else 0,  
            'Probabilit√© Nul ou Victoire Ext√©rieure': log_reg_prob[1] * 100 if log_reg_prob is not None else 0,  
            'Probabilit√© Domicile ou Victoire Ext√©rieure': log_reg_prob[2] * 100 if log_reg_prob is not None else 0,  
        }  
        doc_buffer = create_doc(results)  
        st.download_button("T√©l√©charger le document", doc_buffer, "resultats_match.docx")  

# Fin de l'application
