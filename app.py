import streamlit as st  
import numpy as np  
import pandas as pd  
from scipy.stats import poisson  
from sklearn.model_selection import StratifiedKFold, cross_val_score  
from sklearn.linear_model import LogisticRegression  
from sklearn.ensemble import RandomForestClassifier  
from sklearn.metrics import precision_score, recall_score, f1_score, roc_curve, auc  
import matplotlib.pyplot as plt  
import plotly.express as px  
import altair as alt  
from docx import Document  
import io  

# Configuration de la page  
st.set_page_config(page_title="‚öΩ Analyse de Match de Football", page_icon="‚öΩ", layout="wide")  

# Initialisation de st.session_state  
if 'data' not in st.session_state:  
    st.session_state.data = {}  
if 'historique' not in st.session_state:  
    st.session_state.historique = []  
if 'poids_criteres' not in st.session_state:  
    st.session_state.poids_criteres = {}  

# Fonction pour convertir une cote en probabilit√© implicite  
def cote_en_probabilite(cote):  
    return 1 / cote  

# Fonction pour g√©n√©rer un rapport DOC  
def generer_rapport(predictions):  
    doc = Document()  
    doc.add_heading("Rapport de Pr√©diction", level=1)  
    for prediction in predictions:  
        doc.add_paragraph(f"√âquipe A: {prediction['proba_A']:.2%}, √âquipe B: {prediction['proba_B']:.2%}, Match Nul: {prediction['proba_Nul']:.2%}")  
    return doc  

# Onglets pour l'application  
tab1, tab2 = st.tabs(["Analyse de Match", "Poids des Crit√®res"])  

# Formulaire de collecte des donn√©es  
with tab1:  
    st.markdown("### üèÅ Entrez les Statistiques des √âquipes")  

    # √âquipe A  
    st.markdown("#### √âquipe A")  
    col1, col2 = st.columns(2)  
    with col1:  
        st.session_state.data['score_rating_A'] = st.number_input("‚≠ê Score Rating", value=70.6, format="%.2f", key="rating_A")  
        st.session_state.data['buts_par_match_A'] = st.number_input("‚öΩ Buts Marqu√©s", value=1.5, format="%.2f", key="buts_A")  
        st.session_state.data['buts_concedes_par_match_A'] = st.number_input("ü•Ö Buts Conc√©d√©s", value=1.0, format="%.2f", key="concedes_A")  
        st.session_state.data['possession_moyenne_A'] = st.number_input("üéØ Possession Moyenne", value=55.0, format="%.2f", key="possession_A")  
    with col2:  
        st.session_state.data['expected_but_A'] = st.number_input("üìä Expected Goals (xG)", value=1.5, format="%.2f", key="xG_A")  
        st.session_state.data['expected_concedes_A'] = st.number_input("üìâ Expected Goals Against (xGA)", value=1.2, format="%.2f", key="xGA_A")  
        st.session_state.data['tirs_cadres_A'] = st.number_input("üéØ Tirs Cadr√©s", value=120.0, format="%.2f", key="tirs_A")  
        st.session_state.data['grandes_chances_A'] = st.number_input("üî• Grandes Chances", value=25.0, format="%.2f", key="chances_A")  

    # √âquipe B  
    st.markdown("#### √âquipe B")  
    col3, col4 = st.columns(2)  
    with col3:  
        st.session_state.data['score_rating_B'] = st.number_input("‚≠ê Score Rating", value=65.7, format="%.2f", key="rating_B")  
        st.session_state.data['buts_par_match_B'] = st.number_input("‚öΩ Buts Marqu√©s", value=1.0, format="%.2f", key="buts_B")  
        st.session_state.data['buts_concedes_par_match_B'] = st.number_input("ü•Ö Buts Conc√©d√©s", value=1.5, format="%.2f", key="concedes_B")  
        st.session_state.data['possession_moyenne_B'] = st.number_input("üéØ Possession Moyenne", value=45.0, format="%.2f", key="possession_B")  
    with col4:  
        st.session_state.data['expected_but_B'] = st.number_input("üìä Expected Goals (xG)", value=1.2, format="%.2f", key="xG_B")  
        st.session_state.data['expected_concedes_B'] = st.number_input("üìâ Expected Goals Against (xGA)", value=1.8, format="%.2f", key="xGA_B")  
        st.session_state.data['tirs_cadres_B'] = st.number_input("üéØ Tirs Cadr√©s", value=100.0, format="%.2f", key="tirs_B")  
        st.session_state.data['grandes_chances_B'] = st.number_input("üî• Grandes Chances", value=20.0, format="%.2f", key="chances_B")  

    # Nouveaux crit√®res  
    st.markdown("#### üÜï Nouveaux Crit√®res")  
    col5, col6 = st.columns(2)  
    with col5:  
        st.session_state.data['absences_A'] = st.number_input("üöë Absences (√âquipe A)", value=2, key="absences_A")  
        st.session_state.data['forme_recente_A'] = st.number_input("üìà Forme R√©cente (√âquipe A)", value=7.5, format="%.2f", key="forme_A")  
    with col6:  
        st.session_state.data['absences_B'] = st.number_input("üöë Absences (√âquipe B)", value=3, key="absences_B")  
        st.session_state.data['forme_recente_B'] = st.number_input("üìà Forme R√©cente (√âquipe B)", value=6.0, format="%.2f", key="forme_B")  

    # Cotes des bookmakers  
    st.markdown("#### üìä Cotes des Bookmakers")  
    col7, col8, col9 = st.columns(3)  
    with col7:  
        st.session_state.data['cote_bookmaker_A'] = st.number_input("Cote Victoire A", value=2.0, format="%.2f", key="cote_A")  
    with col8:  
        st.session_state.data['cote_bookmaker_B'] = st.number_input("Cote Victoire B", value=3.0, format="%.2f", key="cote_B")  
    with col9:  
        st.session_state.data['cote_bookmaker_Nul'] = st.number_input("Cote Match Nul", value=3.5, format="%.2f", key="cote_Nul")  

    # Curseurs pour ajuster les poids des crit√®res  
    st.markdown("#### ‚öñÔ∏è Ajustez les Poids des Crit√®res")  
    poids_xG_A = st.slider("Poids pour xG √âquipe A", 0.0, 2.0, 1.0)  
    poids_xG_B = st.slider("Poids pour xG √âquipe B", 0.0, 2.0, 1.0)  

    # Bouton de soumission du formulaire  
    submitted = st.form_submit_button("üîç Analyser le Match")  

# Section d'analyse et de pr√©diction  
if submitted:  
    try:  
        # G√©n√©ration de donn√©es synth√©tiques pour la validation crois√©e  
        n_samples = 100  # Nombre d'√©chantillons synth√©tiques  
        np.random.seed(42)  

        # Donn√©es synth√©tiques pour l'√©quipe A  
        data_A = {  
            'score_rating_A': np.random.normal(st.session_state.data['score_rating_A'], 5, n_samples),  
            'buts_par_match_A': np.random.normal(st.session_state.data['buts_par_match_A'], 0.5, n_samples),  
            'buts_concedes_par_match_A': np.random.normal(st.session_state.data['buts_concedes_par_match_A'], 0.5, n_samples),  
            'possession_moyenne_A': np.random.normal(st.session_state.data['possession_moyenne_A'], 5, n_samples),  
            'expected_but_A': np.random.normal(st.session_state.data['expected_but_A'], 0.5, n_samples),  
            'expected_concedes_A': np.random.normal(st.session_state.data['expected_concedes_A'], 0.5, n_samples),  
            'tirs_cadres_A': np.random.normal(st.session_state.data['tirs_cadres_A'], 10, n_samples),  
            'grandes_chances_A': np.random.normal(st.session_state.data['grandes_chances_A'], 5, n_samples),  
            'absences_A': np.random.normal(st.session_state.data['absences_A'], 1, n_samples),  
            'forme_recente_A': np.random.normal(st.session_state.data['forme_recente_A'], 1, n_samples),  
        }  

        # Donn√©es synth√©tiques pour l'√©quipe B  
        data_B = {  
            'score_rating_B': np.random.normal(st.session_state.data['score_rating_B'], 5, n_samples),  
            'buts_par_match_B': np.random.normal(st.session_state.data['buts_par_match_B'], 0.5, n_samples),  
            'buts_concedes_par_match_B': np.random.normal(st.session_state.data['buts_concedes_par_match_B'], 0.5, n_samples),  
            'possession_moyenne_B': np.random.normal(st.session_state.data['possession_moyenne_B'], 5, n_samples),  
            'expected_but_B': np.random.normal(st.session_state.data['expected_but_B'], 0.5, n_samples),  
            'expected_concedes_B': np.random.normal(st.session_state.data['expected_concedes_B'], 0.5, n_samples),  
            'tirs_cadres_B': np.random.normal(st.session_state.data['tirs_cadres_B'], 10, n_samples),  
            'grandes_chances_B': np.random.normal(st.session_state.data['grandes_chances_B'], 5, n_samples),  
            'absences_B': np.random.normal(st.session_state.data['absences_B'], 1, n_samples),  
            'forme_recente_B': np.random.normal(st.session_state.data['forme_recente_B'], 1, n_samples),  
        }  

        # Cr√©ation du DataFrame synth√©tique  
        df_A = pd.DataFrame(data_A)  
        df_B = pd.DataFrame(data_B)  
        df = pd.concat([df_A, df_B], axis=1)  

        # Cr√©ation de la variable cible (1 si l'√©quipe A gagne, 0 sinon)  
        y = (df['buts_par_match_A'] > df['buts_par_match_B']).astype(int)  

        # Mod√®le Poisson  
        lambda_A = (  
            st.session_state.data['expected_but_A'] * poids_xG_A +  
            st.session_state.data['buts_par_match_A'] +  
            st.session_state.data['tirs_cadres_A'] * 0.1 +  
            st.session_state.data['grandes_chances_A'] * 0.2  
        )  

        lambda_B = (  
            st.session_state.data['expected_but_B'] * poids_xG_B +  
            st.session_state.data['buts_par_match_B'] +  
            st.session_state.data['tirs_cadres_B'] * 0.1 +  
            st.session_state.data['grandes_chances_B'] * 0.2  
        )  

        # Pr√©diction des buts avec Poisson  
        buts_A = poisson.rvs(mu=lambda_A, size=1000)  
        buts_B = poisson.rvs(mu=lambda_B, size=1000)  

        # R√©sultats Poisson  
        st.subheader("üìä Pr√©diction des Buts (Poisson)")  
        col_poisson_A, col_poisson_B = st.columns(2)  
        with col_poisson_A:  
            st.metric("‚öΩ Buts Moyens (√âquipe A)", f"{np.mean(buts_A):.2f}")  
            st.metric("‚öΩ Buts Pr√©vus (75e percentile)", f"{np.percentile(buts_A, 75):.2f}", help="75% des simulations pr√©voient moins de buts que cette valeur.")  
        with col_poisson_B:  
            st.metric("‚öΩ Buts Moyens (√âquipe B)", f"{np.mean(buts_B):.2f}")  
            st.metric("‚öΩ Buts Pr√©vus (75e percentile)", f"{np.percentile(buts_B, 75):.2f}", help="75% des simulations pr√©voient moins de buts que cette valeur.")  

        # Mod√®les de classification avec validation crois√©e  
        skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)  

        # Logistic Regression  
        log_reg = LogisticRegression()  
        log_reg_scores = cross_val_score(log_reg, df, y, cv=skf, scoring='accuracy')  
        log_reg_mean_score = np.mean(log_reg_scores)  

        # Random Forest Classifier  
        rf_clf = RandomForestClassifier()  
        rf_scores = cross_val_score(rf_clf, df, y, cv=skf, scoring='accuracy')  
        rf_mean_score = np.mean(rf_scores)  

        # Entra√Ænement du mod√®le Random Forest pour obtenir les poids des crit√®res  
        rf_clf.fit(df, y)  
        st.session_state.poids_criteres = rf_clf.feature_importances_  

        # Affichage des r√©sultats des mod√®les  
        st.subheader("ü§ñ Performance des Mod√®les")  
        col_log_reg, col_rf = st.columns(2)  
        with col_log_reg:  
            st.metric("üìà R√©gression Logistique (Pr√©cision)", f"{log_reg_mean_score:.2%}")  
        with col_rf:  
            st.metric("üå≤ For√™t Al√©atoire (Pr√©cision)", f"{rf_mean_score:.2%}")  

        # Comparaison des probabilit√©s de victoire  
        proba_A = np.mean(buts_A) / (np.mean(buts_A) + np.mean(buts_B))  
        proba_B = np.mean(buts_B) / (np.mean(buts_A) + np.mean(buts_B))  
        proba_Nul = 1 - (proba_A + proba_B)  

        # Cotes pr√©dites  
        cote_predite_A = 1 / proba_A  
        cote_predite_B = 1 / proba_B  
        cote_predite_Nul = 1 / proba_Nul  

        # Stockage des pr√©dictions dans l'historique  
        st.session_state.historique.append({  
            'proba_A': proba_A,  
            'proba_B': proba_B,  
            'proba_Nul': proba_Nul,  
        })  

        # G√©n√©ration du rapport DOC  
        if st.button("üìÑ T√©l√©charger le Rapport"):  
            doc = generer_rapport(st.session_state.historique)  
            buffer = io.BytesIO()  
            doc.save(buffer)  
            buffer.seek(0)  
            st.download_button("T√©l√©charger le rapport", buffer, "rapport_predictions.docx")  

        # Tableau synth√©tique des r√©sultats  
        st.subheader("üìä Tableau Synth√©tique des R√©sultats")  
        data = {  
            "√âquipe": ["√âquipe A", "√âquipe B", "Match Nul"],  
            "Probabilit√© Pr√©dite": [f"{proba_A:.2%}", f"{proba_B:.2%}", f"{proba_Nul:.2%}"],  
            "Cote Pr√©dite": [f"{cote_predite_A:.2f}", f"{cote_predite_B:.2f}", f"{cote_predite_Nul:.2f}"],  
            "Cote Bookmaker": [  
                f"{st.session_state.data['cote_bookmaker_A']:.2f}",  
                f"{st.session_state.data['cote_bookmaker_B']:.2f}",  
                f"{st.session_state.data['cote_bookmaker_Nul']:.2f}",  
            ],  
            "Value Bet": [  
                "‚úÖ" if cote_predite_A < st.session_state.data['cote_bookmaker_A'] else "‚ùå",  
                "‚úÖ" if cote_predite_B < st.session_state.data['cote_bookmaker_B'] else "‚ùå",  
                "‚úÖ" if cote_predite_Nul < st.session_state.data['cote_bookmaker_Nul'] else "‚ùå",  
            ],  
        }  
        df_resultats = pd.DataFrame(data)  
        st.table(df_resultats)  

        # Message rappel sur le Value Bet  
        st.markdown("""  
        ### üí° Qu'est-ce qu'un Value Bet ?  
        Un **Value Bet** est un pari o√π la cote pr√©dite par le mod√®le est **inf√©rieure** √† la cote propos√©e par le bookmaker.   
        Cela indique que le bookmaker sous-estime la probabilit√© de cet √©v√©nement, ce qui en fait une opportunit√© potentiellement rentable.  
        """)  

# Onglet pour afficher les poids des crit√®res  
with tab2:  
    st.subheader("üìä Poids des Crit√®res du Mod√®le Random Forest")  
    if st.session_state.poids_criteres:  
        poids_df = pd.DataFrame({  
            'Crit√®res': [  
                'Score Rating A', 'Buts Marqu√©s A', 'Buts Conc√©d√©s A', 'Possession Moyenne A',  
                'Expected Goals A', 'Expected Goals Against A', 'Tirs Cadr√©s A', 'Grandes Chances A',  
                'Absences A', 'Forme R√©cente A', 'Score Rating B', 'Buts Marqu√©s B', 'Buts Conc√©d√©s B',  
                'Possession Moyenne B', 'Expected Goals B', 'Expected Goals Against B', 'Tirs Cadr√©s B',  
                'Grandes Chances B', 'Absences B', 'Forme R√©cente B'  
            ],  
            'Poids': st.session_state.poids_criteres  
        })
                # Affichage des poids des crit√®res dans un tableau  
        st.table(poids_df)  

        # Visualisation des poids des crit√®res avec Plotly  
        fig = px.bar(poids_df, x='Crit√®res', y='Poids', title='Poids des Crit√®res du Mod√®le Random Forest',   
                      labels={'Poids': 'Poids', 'Crit√®res': 'Crit√®res'}, color='Poids')  
        st.plotly_chart(fig)  

        # Visualisation des poids des crit√®res avec Altair  
        alt_chart = alt.Chart(poids_df).mark_bar().encode(  
            x=alt.X('Crit√®res:N', sort='-y'),  
            y='Poids:Q',  
            color='Poids:Q'  
        ).properties(  
            title='Poids des Crit√®res du Mod√®le Random Forest'  
        )  
        st.altair_chart(alt_chart, use_container_width=True)  

# Section de face-√†-face entre les √©quipes  
st.markdown("### ü§ù Face-√†-Face entre les √âquipes")  
st.markdown("#### Crit√®res d'Attaque et de D√©fense")  

# Collecte des donn√©es pour les crit√®res d'attaque et de d√©fense  
for i in range(1, 16):  
    col_attack_A, col_attack_B = st.columns(2)  
    with col_attack_A:  
        st.session_state.data[f'attaque_A_{i}'] = st.number_input(f"Attaque Crit√®re {i} √âquipe A", value=0.0, format="%.2f", key=f'attaque_A_{i}')  
    with col_attack_B:  
        st.session_state.data[f'attaque_B_{i}'] = st.number_input(f"Attaque Crit√®re {i} √âquipe B", value=0.0, format="%.2f", key=f'attaque_B_{i}')  

for i in range(1, 16):  
    col_defense_A, col_defense_B = st.columns(2)  
    with col_defense_A:  
        st.session_state.data[f'defense_A_{i}'] = st.number_input(f"D√©fense Crit√®re {i} √âquipe A", value=0.0, format="%.2f", key=f'defense_A_{i}')  
    with col_defense_B:  
        st.session_state.data[f'defense_B_{i}'] = st.number_input(f"D√©fense Crit√®re {i} √âquipe B", value=0.0, format="%.2f", key=f'defense_B_{i}')  

# Bouton de soumission pour les crit√®res d'attaque et de d√©fense  
if st.button("üîç Analyser le Face-√†-Face"):  
    # R√©cup√©ration des donn√©es d'attaque et de d√©fense  
    attaque_A = [st.session_state.data[f'attaque_A_{i}'] for i in range(1, 16)]  
    attaque_B = [st.session_state.data[f'attaque_B_{i}'] for i in range(1, 16)]  
    defense_A = [st.session_state.data[f'defense_A_{i}'] for i in range(1, 16)]  
    defense_B = [st.session_state.data[f'defense_B_{i}'] for i in range(1, 16)]  

    # Calcul des moyennes pour les crit√®res d'attaque et de d√©fense  
    moyenne_attaque_A = np.mean(attaque_A)  
    moyenne_attaque_B = np.mean(attaque_B)  
    moyenne_defense_A = np.mean(defense_A)  
    moyenne_defense_B = np.mean(defense_B)  

    # Affichage des r√©sultats du face-√†-face  
    st.subheader("üìä R√©sultats du Face-√†-Face")  
    st.metric("Moyenne Attaque √âquipe A", f"{moyenne_attaque_A:.2f}")  
    st.metric("Moyenne Attaque √âquipe B", f"{moyenne_attaque_B:.2f}")  
    st.metric("Moyenne D√©fense √âquipe A", f"{moyenne_defense_A:.2f}")  
    st.metric("Moyenne D√©fense √âquipe B", f"{moyenne_defense_B:.2f}")  

    # Visualisation des r√©sultats du face-√†-face avec Plotly  
    df_face_a_face = pd.DataFrame({  
        'Crit√®res': ['Attaque √âquipe A', 'Attaque √âquipe B', 'D√©fense √âquipe A', 'D√©fense √âquipe B'],  
        'Moyenne': [moyenne_attaque_A, moyenne_attaque_B, moyenne_defense_A, moyenne_defense_B]  
    })  

    fig_face_a_face = px.bar(df_face_a_face, x='Crit√®res', y='Moyenne', title='Face-√†-Face entre les √âquipes',   
                             labels={'Moyenne': 'Moyenne', 'Crit√®res': 'Crit√®res'}, color='Moyenne')  
    st.plotly_chart(fig_face_a_face)  

    # Visualisation des r√©sultats du face-√†-face avec Altair  
    alt_face_a_face = alt.Chart(df_face_a_face).mark_bar().encode(  
        x=alt.X('Crit√®res:N', sort='-y'),  
        y='Moyenne:Q',  
        color='Moyenne:Q'  
    ).properties(  
        title='Face-√†-Face entre les √âquipes'  
    )  
    st.altair_chart(alt_face_a_face, use_container_width=True)  

# Pied de page informatif  
st.markdown("""  
### ü§î Comment Interpr√©ter ces R√©sultats ?  
- **üìä Pr√©diction des Buts (Poisson)** : Les buts moyens pr√©vus pour chaque √©quipe sont calcul√©s √† partir des statistiques d'entr√©e.  
- **ü§ñ Performance des Mod√®les** : Les pr√©cisions des mod√®les de r√©gression logistique et de for√™t al√©atoire sont affich√©es.  
- **üìà Comparateur de Cotes** : Les cotes pr√©dites et les cotes des bookmakers sont compar√©es pour identifier les **Value Bets**.  
‚ö†Ô∏è *Ces pr√©dictions sont des estimations statistiques et ne garantissent pas le r√©sultat r√©el.*  
""")
